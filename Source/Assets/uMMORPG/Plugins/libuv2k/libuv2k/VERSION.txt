V0.19:
- fix: deadlock/crash when closing loop inside a uv_run call is now detected and
  an error is logged instead of allowing libuv to crash Unity.
- added more tests
- fix: Shutdown now clears nativeLookup after logging about them not being
  disposed. fixes a bug where if one test/session would miss disposing, the
  values would stay in there and make all future tests fail until the next
  domain reload.
- fix: MirrorTransport OnLibuvServerClosed doesn't access disposed handle's
  user token anymore. we get the connectionId before disposing now.
- fix: fix: MirrorTransport now Updates even if server/client are null. fixes
  ClientVoluntaryDisconnect test not passing because
  client.Disconnect()->uv_close callback would only be called in next loop
  update, which would never happen if we don't update after client was disposed.
- fix: TcpStream.OnCloseHandle doesn't invalidate the handle before the OnClosed
  callback anymore. OnCloseCallback didn't really access it in any way that could
  cause a problem, but still.
- fix: MirrorTransport, TestClient/Server don't manually dispose the handle in
  OnLibuvError anymore. libuv2k does it internally already, and calling it twice
  is actually not a good idea.
- fix: MirrorTransport, TestClient/Server don't manually dispose the handle in
  OnLibuvClosed anymore. libuv2k does it internally already, and calling it
  Dispose() instead of a Dispose() call is just a bad idea. potentially fixes
  memory/crash issues.
- fix: MirrorTransport: only call libuv2k.Shutdown() once. don't call it in
  Transport.Shutdown

V0.18:
- fix: major NativeHandle & NativeHandle rewrite
  - guarantee consistent alloc/free behaviour for all NativeHandles
  - fix & detect several memory issues.
  - greatly simplified code by using a managed lookup instead of pinning and
    associating managed objects into native libuv structs
  - performance improved because of simplified architecture (less properties)
- fix: Loop.CloseHandle: only call uv_walk and uv_run once, not in a while loop
  anymore. There is no evidence that this was necessary.
- fix: Loop.CloseHandle now cleans up libuv in the recommended way
- libuv2k.Shutdown now logs errors for NativeHandles that were not disposed
- fix: TcpStream.Dispose/CloseHandle solved circular cleanup calls
- TcpStream simplified
- fix: ECONNRESET is not detected as a serious error anymore.

V0.17:
  - MirrorTransport: updated to latest Mirror

V0.16:
  - MirrorTransport: removed x64-only check

V0.15:
  - perf: removed Send() runtime allocations from casting callback to uv_watcher_cb
  - perf: removed Receive() runtime allocations from casting callback to Action

V0.14:
  - fix: WriteRequest Pool logic moved out of WriteRequest. Simplifies code and
    fixes a bug where
      Shutdown->Pool.Clear->WriteRequest.Dispose->WriteRequest.Close
    would try to return to the pool that we are currently iterating (potential
    dead lock / race condition)
  - fix: [MonoPInvokeCallback] attribute added to C->C# callbacks to fix IL2CPP
    builds runtime error "NotSupportedException: To marshal a managed method,
    please add an attribute named 'MonoPInvokeCallback' to the method definition"
  - perf: ConcurrentPool converted to regular Pool. libuv uses an event loop,
    and the callbacks are always called in main thread
V0.13:
  - Windows 32 Bit support
V0.12:
  - fix: Windows DLL built in release mode to avoid missing dependencies causing
    DllNotFoundException in Unity
  - Server GetAddress implemented
V0.11:
  - fixes, perf, cleanup
  - libuv binaries bumped to V1.39.0
V0.10:
  - feature complete